<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="charadeEnd" xml:space="preserve">
    <value>Koniec haseł!</value>
  </data>
  <data name="charadeReset" xml:space="preserve">
    <value>Kesz do kalamburów zresetowany.</value>
  </data>
  <data name="customCommandLog" xml:space="preserve">
    <value>Wywołano komendę {0} modułu {1} dla użytkownika {2} w kanale {3}</value>
  </data>
  <data name="customDeleteLog" xml:space="preserve">
    <value>Użytkownik {0} w kanale {1} usunął wiadomość o treści: {2}</value>
  </data>
  <data name="customEditLog" xml:space="preserve">
    <value>Użytkownik {0} w kanale {1} zmienił wiadomość: {2} -&gt; {3}</value>
  </data>
  <data name="customReactionLog" xml:space="preserve">
    <value>Dodano reakcję {0} dla wiadomości użytkownika {1} o treści {2} w kanale {3}</value>
  </data>
  <data name="daysAgo" xml:space="preserve">
    <value>{0} dni temu.</value>
  </data>
  <data name="declineCommand" xml:space="preserve">
    <value>Z {0} to se możesz... to wiesz co se możesz!</value>
    <comment>Sometimes he has enough</comment>
  </data>
  <data name="derpQuote" xml:space="preserve">
    <value>Księga DerpRoomu mówi wyraźnie...</value>
  </data>
  <data name="derpQuote2" xml:space="preserve">
    <value>W Księdze DerpRoomu napisane jest jasno...</value>
  </data>
  <data name="derpQuote3" xml:space="preserve">
    <value>Jak pisze w Księdze DerpRoomu czarno na białym...</value>
  </data>
  <data name="doctor" xml:space="preserve">
    <value>Sorry, ale teraz się doktoryzuję.</value>
  </data>
  <data name="eggString" xml:space="preserve">
    <value>JAJCO</value>
  </data>
  <data name="finishingBlow" xml:space="preserve">
    <value>HISSATSU</value>
  </data>
  <data name="genkiDama" xml:space="preserve">
    <value>GÓWNO-DAMA!!!</value>
  </data>
  <data name="girlfriend" xml:space="preserve">
    <value>Sorry, akurat wyszedłem z Martyną.</value>
  </data>
  <data name="head" xml:space="preserve">
    <value>Orzeł</value>
  </data>
  <data name="husbandoBest" xml:space="preserve">
    <value>{0} najlepszy.</value>
  </data>
  <data name="husbandoBetter" xml:space="preserve">
    <value>{0} lepszy.</value>
  </data>
  <data name="impossible" xml:space="preserve">
    <value>Panieee, tak to się nie da.</value>
  </data>
  <data name="inTheAss" xml:space="preserve">
    <value>...w dupie!</value>
  </data>
  <data name="inTheJar" xml:space="preserve">
    <value>...w słoiku!</value>
  </data>
  <data name="job" xml:space="preserve">
    <value>Sorry, teraz pracuję.</value>
  </data>
  <data name="lateArrivalMessage1" xml:space="preserve">
    <value>Sorry, mordo! Autobus mi uciekł i się spóźniłem.</value>
  </data>
  <data name="lateArrivalMessage2" xml:space="preserve">
    <value>Stary, wybacz spóźnienie! Myślałem, że też się spóźnisz.</value>
  </data>
  <data name="legiaWarszawa" xml:space="preserve">
    <value>Legia Warszawa to najlepszy klub, kto nie wierzy, to chuj mu w dziób!</value>
  </data>
  <data name="listCommands" xml:space="preserve">
    <value>Elo mordy, tutaj są komendy</value>
    <comment>List  all comands</comment>
  </data>
  <data name="marekWaifus" xml:space="preserve">
    <value>{0} jest najlepsza! &lt;3</value>
    <comment>String for detecting Marek's waifus</comment>
  </data>
  <data name="masterThesis" xml:space="preserve">
    <value>Sorry, ale muszę pisać magisterkę.</value>
    <comment>Cheeky excuse to not hangout with friends</comment>
  </data>
  <data name="missedThrow" xml:space="preserve">
    <value>O kuźwa, nie trafiłem! Sorry {0} mordo!</value>
  </data>
  <data name="missedThrow2" xml:space="preserve">
    <value>Tsk... Nie trafiłem.</value>
  </data>
  <data name="noNumber" xml:space="preserve">
    <value>Ni ma liczby naturalnej, rzucam zwykłą.</value>
  </data>
  <data name="parameters" xml:space="preserve">
    <value>Parametry: {0}</value>
  </data>
  <data name="preemptiveAttack" xml:space="preserve">
    <value>Atak bez ostrzeżenia!</value>
  </data>
  <data name="quoteForToday" xml:space="preserve">
    <value>Cytat na dziś:</value>
  </data>
  <data name="rabbitMissing" xml:space="preserve">
    <value>Lonk grubasie, gdzie rabbit?!</value>
  </data>
  <data name="runAway" xml:space="preserve">
    <value>Spierdalamyyyy!</value>
  </data>
  <data name="secretGiftDeny" xml:space="preserve">
    <value>Słucham się tylko {0}!</value>
    <comment>Deny giving gift for anyone than specific friend.</comment>
  </data>
  <data name="shitString" xml:space="preserve">
    <value>GÓWNO</value>
    <comment>Best string name ever</comment>
  </data>
  <data name="snoring" xml:space="preserve">
    <value>Chrrr... chrrr... chrrr...</value>
  </data>
  <data name="backlog" xml:space="preserve">
    <value>Rozkładówka (backlog)</value>
  </data>
  <data name="swearWordCounterEntry" xml:space="preserve">
    <value>{0} do tej pory użył słowa  "{1}" {2} razy.</value>
  </data>
  <data name="swearWordCounterHeader" xml:space="preserve">
    <value>Zliczam brzydkie słowa!</value>
  </data>
  <data name="tails" xml:space="preserve">
    <value>Reszka</value>
  </data>
  <data name="thesisDefense" xml:space="preserve">
    <value>Sorry, ale muszę uczyć się na obronę.</value>
    <comment>Another cheeky excuse to not hangout with friends</comment>
  </data>
  <data name="today" xml:space="preserve">
    <value>dzisiaj.</value>
  </data>
  <data name="toldYou" xml:space="preserve">
    <value>Ech {0}, przecież mówiłem Ci że z {1} to se możesz... To wiesz co se możesz!</value>
  </data>
  <data name="tooMuch" xml:space="preserve">
    <value>Za dużo :/</value>
  </data>
  <data name="waifuBest" xml:space="preserve">
    <value>{0} najlepsza.</value>
  </data>
  <data name="waifuBetter" xml:space="preserve">
    <value>{0} lepsza.</value>
  </data>
  <data name="waifuEqual" xml:space="preserve">
    <value>Obie świetne &lt;3!</value>
  </data>
  <data name="waifuShit" xml:space="preserve">
    <value>{0} najlepsza, reszta to shit!</value>
  </data>
  <data name="waitForIt" xml:space="preserve">
    <value>Patrzcie chłopaki jak mu pocisnę...</value>
  </data>
  <data name="wrongQuestion" xml:space="preserve">
    <value>Złe pytanie.</value>
  </data>
  <data name="yesterday" xml:space="preserve">
    <value>wczoraj.</value>
  </data>
  <data name="ytNotFound" xml:space="preserve">
    <value>Nie znalazłem takiego filmu jak {0}.</value>
  </data>
  <data name="onlyErina" xml:space="preserve">
    <value>Jak Nakiri to tylko Erina! Reszta to shit!</value>
    <comment>Because she's the best.</comment>
  </data>
  <data name="flagReset" xml:space="preserve">
    <value>Flaga zresetowana.</value>
  </data>
  <data name="whyWouldIDoThat" xml:space="preserve">
    <value>Czemu ja się zawahałem żeby strzelić? Mam wyrzuty sumienia?</value>
  </data>
  <data name="added" xml:space="preserve">
    <value>Dodano {0}</value>
  </data>
  <data name="removed" xml:space="preserve">
    <value>Usunięto {0}</value>
  </data>
  <data name="versionHeader" xml:space="preserve">
    <value>Wersja</value>
  </data>
  <data name="about" xml:space="preserve">
    <value>O bocie</value>
  </data>
  <data name="title" xml:space="preserve">
    <value>Tytuł</value>
  </data>
  <data name="translations" xml:space="preserve">
    <value>Tłumaczenia</value>
  </data>
  <data name="watchedRead" xml:space="preserve">
    <value>Obejrzane/przeczytane przez:</value>
  </data>
  <data name="helionPassword" xml:space="preserve">
    <value>Helion password:</value>
  </data>
  <data name="helionUser" xml:space="preserve">
    <value>Helion user e-mail:</value>
  </data>
  <data name="utRotationChange" xml:space="preserve">
    <value>Zmieniono rotację map.</value>
  </data>
  <data name="currentMapRotationHeader" xml:space="preserve">
    <value>Aktualna rotacja:</value>
  </data>
  <data name="currentMapHeader" xml:space="preserve">
    <value>Obecna mapa:</value>
  </data>
  <data name="wedding" xml:space="preserve">
    <value>Sorry, muszę zorganizować ślub.</value>
  </data>
  <data name="quarantine" xml:space="preserve">
    <value>Sorry, jest kwarantanna.</value>
  </data>
  <data name="streamDayChanged" xml:space="preserve">
    <value>Zmieniono dzień streamu na "{0}".</value>
  </data>
  <data name="lonkStole" xml:space="preserve">
    <value>Sorry, ale Lonk wygryzł mnie z serwera</value>
  </data>
  <data name="drunk" xml:space="preserve">
    <value>Sorry, ale przepijam hajsy z korpo</value>
  </data>
</root>